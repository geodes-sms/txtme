"""
Petrinet grammar usde for test cases.
It is NOT ADVISED to use this for regular formalsim mapping, because the actual grammar will most probably change.
"""

class PNGrammar(object):
	def __init__(self):
		self.rules = {
			'place_def': {'body': ['.', '$LCBR', ['|', ['.', '@tokens_def', ['?', ['.', '$COMMA', '@capacity_def']]], ['.', '@capacity_def', ['?', ['.', '$COMMA', '@tokens_def']]]], '$RCBR'], 'type': 'prod', 'errortext': 'place_def'},
			'place_decl': {'body': ['.', '$PLACE', '@name', ['?', '@place_def'], '$SEMICOL'], 'type': 'prod', 'errortext': 'place_decl'},
			'capacity_def': {'body': ['.', '$CAPACITY', '$COLON', '@integer'], 'type': 'prod', 'errortext': 'capacity_def'},
			'name': {'body': ['.', '$IDENTIFIER'], 'type': 'prod', 'errortext': 'name'},
			'weight_def': {'body': ['.', '$LCBR', '$WEIGHT', '$COLON', '@integer', '$RCBR'], 'type': 'prod', 'errortext': 'weight_def'},
			'source': {'body': ['.', '$IDENTIFIER'], 'type': 'prod', 'errortext': 'source'},
			'implicit_autogenerated_1421842': {'body': ['*', ['|', '$NEWLINE', '$LINE_CONT', '$WS', '$COMMENT']], 'type': 'prod', 'errortext': "Automatically generated 'Implict' rule"},
			'destination': {'body': ['.', '$IDENTIFIER'], 'type': 'prod', 'errortext': 'destination'},
			'arc_decl': {'body': ['.', '$ARC', '@name', ['?', '@weight_def'], '$COLON', '$FROM', '@source', '$TO', '@destination', '$SEMICOL'], 'type': 'prod', 'errortext': 'arc_decl'},
			'start': {'body': ['.', '$PETRINET', '@name', ['*', ['|', '@place_decl', '@transition_decl', '@arc_decl']], '$END'], 'interleave': ['?', '@implicit_autogenerated_1421842'], 'type': 'prod', 'errortext': 'start'},
			'transition_decl': {'body': ['.', '$TRANSITION', '@name', '$SEMICOL'], 'type': 'prod', 'errortext': 'transition_decl'},
			'tokens_def': {'body': ['.', '$TOKENS', '$COLON', '@integer'], 'type': 'prod', 'errortext': 'tokens_def'},
			'integer': {'body': ['+', '$DIGIT'], 'type': 'prod', 'errortext': 'integer'}
		}

		self.tokens = {
			'LPAR': { 'type': 'token', 'reg': r'\(', 'errortext': '('},
			'TRANSITION': { 'type': 'token', 'reg': r'Transition', 'errortext': 'Transition'},
			'RPAR': { 'type': 'token', 'reg': r'\)', 'errortext': ')'},
			'TOKENS': { 'type': 'token', 'reg': r'tokens', 'errortext': 'tokens'},
			'WS': { 'type': 'token', 'reg': r'[\t \f]+', 'errortext': 'White Space'},
			'COMMENT': { 'type': 'token', 'reg': r'//[^\n]*', 'errortext': 'Comment', 'hidden': False},
			'PETRINET': { 'type': 'token', 'reg': r'Petrinet', 'errortext': 'Petrinet'},
			'CAPACITY': { 'type': 'token', 'reg': r'capacity', 'errortext': 'capacity'},
			'NEWLINE': { 'type': 'token', 'reg': r'(\r?\n[\t ]*)+', 'errortext': 'New Line'},
			'TO': { 'type': 'token', 'reg': r'to', 'errortext': 'to'},
			'LCBR': { 'type': 'token', 'reg': r'\{', 'errortext': '{'},
			'COLON': { 'type': 'token', 'reg': r':', 'errortext': ':'},
			'COMMA': { 'type': 'token', 'reg': r',', 'errortext': ','},
			'IDENTIFIER': { 'type': 'token', 'reg': r'[a-zA-Z_][a-zA-Z_0-9]*', 'errortext': 'Identifier'},
			'RCBR': { 'type': 'token', 'reg': r'\}', 'errortext': '}'},
			'END': { 'type': 'token', 'reg': r'end', 'errortext': 'end'},
			'WEIGHT': { 'type': 'token', 'reg': r'weight', 'errortext': 'weight'},
			'PLACE': { 'type': 'token', 'reg': r'Place', 'errortext': 'Place'},
			'DIGIT': { 'type': 'token', 'reg': r'[0-9]', 'errortext': 'Digit'},
			'FROM': { 'type': 'token', 'reg': r'from', 'errortext': 'from'},
			'SEMICOL': { 'type': 'token', 'reg': r';', 'errortext': ';'},
			'LINE_CONT': { 'type': 'token', 'reg': r'\\[\t \f]*\r?\n', 'errortext': 'Line Continuation'},
			'ARC': { 'type': 'token', 'reg': r'Arc', 'errortext': 'Arc'}
		}