""" Generated by Statechart compiler by Glenn De Jonghe and Joeri Exelmans

Date:   Mon Oct  6 13:24:49 2014

Model author: Yentl Van Tendeloo
Model name:   MvK Server interface
Model description:
MvK Server interface that receives events from the network using XMLHTTPRequests """

from python_runtime.statecharts_core import *
#TODO temporary
import sys
sys.path.append("../")

from mvk.mvk import MvK
from mvk.impl.python.util.jsonserializer import MvKEncoder
from mvk.impl.client.jsondeserializer import MvKDecoder

# package "MvK Server interface"

class MvKServer(RuntimeClassBase):
	def __init__(self, controller):
		RuntimeClassBase.__init__(self)
		
		if controller:
			# User defined input ports
			self.inports = {}
			
			self.controller = controller
			self.object_manager = controller.object_manager
			self.current_state = {}
			self.history_state = {}
			self.timers = {}
			
			# Initialize statechart
			self.current_state[self.Root] = []
			self.current_state[self.Root_main] = []
			self.current_state[self.Root_main_keepalive] = []
			self.current_state[self.Root_main_main] = []
			
			# Call user defined constructor
			MvKServer.user_defined_constructor(self)
	
	# User defined constructor
	
	def user_defined_constructor(self):
		self.encoder = MvKEncoder()
		self.decoder = MvKDecoder()
		self.mvk = MvK()
		self.client_id = None
	
	# Unique IDs for all statechart nodes
	Root = 0
	Root_main = 1
	Root_main_keepalive = 2
	Root_main_main = 3
	Root_main_keepalive_keepalive = 4
	Root_main_main_main = 5
	
	# User defined destructor
	
	def user_defined_destructor(self):
		pass
	# User defined method
	
	def processRequest(self, func = None, args = None):
		if func == None: func = None
		if args == None: args = None
		try:
		    decoded_args = self.decoder.decode(args)
		    if isinstance(decoded_args, list):
		        result = getattr(self.mvk, func)(*decoded_args[0], **decoded_args[1])
		    else:
		        result = getattr(self.mvk, func)(decoded_args)
		    return self.encoder.encode(result)
		except Exception:
		    import traceback
		    print(traceback.format_exc())
		    return '{"type": "MvKReadLog", "value": {"keys": [{"type": "StringValue", "value": "status_message"}, {"type": "StringValue", "value": "status_code"}], "values": [{"type": "StringValue", "value": "Serialization problem"}, {"type": "IntegerValue", "value": 801}]}}'
	
	# Statechart enter/exit action method(s)
	
	def enter_Root_main(self):
		self.current_state[self.Root].append(self.Root_main)
	
	def exit_Root_main(self):
		self.exit_Root_main_keepalive()
		self.exit_Root_main_main()
		self.current_state[self.Root] = []
	
	def enter_Root_main_keepalive(self):
		self.current_state[self.Root_main].append(self.Root_main_keepalive)
	
	def exit_Root_main_keepalive(self):
		if self.Root_main_keepalive_keepalive in self.current_state[self.Root_main_keepalive]:
			self.exit_Root_main_keepalive_keepalive()
		self.current_state[self.Root_main] = []
	
	def enter_Root_main_main(self):
		self.current_state[self.Root_main].append(self.Root_main_main)
	
	def exit_Root_main_main(self):
		if self.Root_main_main_main in self.current_state[self.Root_main_main]:
			self.exit_Root_main_main_main()
		self.current_state[self.Root_main] = []
	
	def enter_Root_main_keepalive_keepalive(self):
		self.timers[0] = 5
		self.current_state[self.Root_main_keepalive].append(self.Root_main_keepalive_keepalive)
	
	def exit_Root_main_keepalive_keepalive(self):
		self.timers.pop(0, None)
		self.current_state[self.Root_main_keepalive] = []
	
	def enter_Root_main_main_main(self):
		self.current_state[self.Root_main_main].append(self.Root_main_main_main)
	
	def exit_Root_main_main_main(self):
		self.current_state[self.Root_main_main] = []
	# Statechart enter/exit default method(s)
	
	def enterDefault_Root_main(self):
		self.enter_Root_main()
		self.enterDefault_Root_main_keepalive()
		self.enterDefault_Root_main_main()
	
	def enterDefault_Root_main_keepalive(self):
		self.enter_Root_main_keepalive()
		self.enter_Root_main_keepalive_keepalive()
	
	def enterDefault_Root_main_main(self):
		self.enter_Root_main_main()
		self.enter_Root_main_main_main()
	# Statechart transitions
	
	def transition_Root(self, event):
		caught = False
		if not caught:
			if self.current_state[self.Root][0] == self.Root_main:
				caught = self.transition_Root_main(event)
		return caught
	
	def transition_Root_main(self, event):
		caught = False
		if not caught:
			caught = (self.transition_Root_main_keepalive(event) or caught)
			caught = (self.transition_Root_main_main(event) or caught)
		return caught
	
	def transition_Root_main_keepalive(self, event):
		caught = False
		if not caught:
			if self.current_state[self.Root_main_keepalive][0] == self.Root_main_keepalive_keepalive:
				caught = self.transition_Root_main_keepalive_keepalive(event)
		return caught
	
	def transition_Root_main_keepalive_keepalive(self, event):
		caught = False
		enableds = []
		if event.name == "_0after":
			enableds.append(1)
		if (event.name == "request") and (event.port == "request"):
			parameters = event.parameters
			func = parameters[0]
			args = parameters[1]
			client_id = parameters[2]
			if client_id == self.client_id:
				enableds.append(2)
		if (event.name == "keepalive") and (event.port == "request"):
			parameters = event.parameters
			client_id = parameters[0]
			if client_id == self.client_id:
				enableds.append(3)
		if (event.name == "keepalive") and (event.port == "request"):
			parameters = event.parameters
			client_id = parameters[0]
			if client_id != self.client_id:
				enableds.append(4)
		if len(enableds) > 1:
			print "Runtime warning : indeterminism detected in a transition from node Root_main_keepalive_keepalive. Only the first in document order enabled transition is executed."
		if len(enableds) > 0:
			enabled = enableds[0]
			if enabled == 1:
				self.exit_Root_main_keepalive_keepalive()
				# clear the client_id
				self.client_id = None
				self.enter_Root_main_keepalive_keepalive()
			elif enabled == 2:
				parameters = event.parameters
				func = parameters[0]
				args = parameters[1]
				client_id = parameters[2]
				self.exit_Root_main_keepalive_keepalive()
				self.enter_Root_main_keepalive_keepalive()
			elif enabled == 3:
				parameters = event.parameters
				client_id = parameters[0]
				self.exit_Root_main_keepalive_keepalive()
				self.enter_Root_main_keepalive_keepalive()
			elif enabled == 4:
				parameters = event.parameters
				client_id = parameters[0]
				self.exit_Root_main_keepalive_keepalive()
				self.enter_Root_main_keepalive_keepalive()
			caught = True
		return caught
	
	def transition_Root_main_main(self, event):
		caught = False
		if not caught:
			if self.current_state[self.Root_main_main][0] == self.Root_main_main_main:
				caught = self.transition_Root_main_main_main(event)
		return caught
	
	def transition_Root_main_main_main(self, event):
		caught = False
		enableds = []
		if (event.name == "request") and (event.port == "request"):
			enableds.append(1)
		if len(enableds) > 1:
			print "Runtime warning : indeterminism detected in a transition from node Root_main_main_main. Only the first in document order enabled transition is executed."
		if len(enableds) > 0:
			enabled = enableds[0]
			if enabled == 1:
				parameters = event.parameters
				func = parameters[0]
				args = parameters[1]
				client_id = parameters[2]
				self.exit_Root_main_main_main()
				if self.client_id is None:
				    self.client_id = client_id
				if client_id != self.client_id:
				    response = '{"type": "MvKReadLog", "value": {"keys": [{"type": "StringValue", "value": "status_message"}, {"type": "StringValue", "value": "status_code"}], "values": [{"type": "StringValue", "value": "Server already in use by other client"}, {"type": "IntegerValue", "value": 805}]}}'
				else:
				    response = self.processRequest(func, args)
				new_event = Event("reply", "", [response])
				self.controller.outputEvent(new_event)
				self.enter_Root_main_main_main()
			caught = True
		return caught
	
	# Execute transitions
	
	def transition(self, event = None):
		if event == None: event = Event("")
		self.state_changed = self.transition_Root(event)
	
	# inState method for statechart
	
	def inState(self, nodes):
		for c in self.current_state.itervalues():
			new_nodes = []
			for n in nodes:
				if not (n in c):
					new_nodes.append(n)
			nodes = new_nodes
			if len(nodes) == 0:
				return True
		return False
	
	def start(self):
		RuntimeClassBase.start(self)
		self.enterDefault_Root_main()

class ObjectManager(ObjectManagerBase):
	def __init__(self, controller):
		ObjectManagerBase.__init__(self, controller)
	
	def instantiate(self, class_name, construct_params):
		if class_name == "MvKServer":
			instance = MvKServer(self.controller)
			instance.associations = {}
		return instance

class Controller(ThreadsControllerBase):
	def __init__(self, keep_running = None, finished_callback = None):
		if keep_running == None: keep_running = True
		if finished_callback == None: finished_callback = None
		ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, finished_callback)
		self.addInputPort("request")
		self.addOutputPort("reply")
		self.object_manager.createInstance("MvKServer", [])