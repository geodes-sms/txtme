<class name="MvKClient">
    <relationships>
        <association name="parent" class="MainApp" min="1" max="1" />
    </relationships>
    <method name="MvKClient">
        <parameter name="UserID" type="int" />
        <body>
            <![CDATA[
            random.seed()
            self.client_id = random.randint(0, 9999999)
            self.server_id = UserID
            #self.requesturl = "http://studento.ua.ac.be/~s0090165/mvk.php?server_id=" + str(self.server_id) + "&client_id=" + str(self.client_id)
            self.requesturl = "http://127.0.0.1:8000/?server_id=%s&client_id=%s" % (self.server_id, self.client_id)
            self.encoder = MvKEncoder()
            self.decoder = MvKDecoder()
            self.history = []
            self.future = []
            ]]>
        </body>
    </method>
    <method name="requestGET">
        <parameter name="function"/>
        <parameter name="data"/>
        <body>
            <![CDATA[
            query = "&func=" + function + "&args=" + urllib.quote(data)
            response = urllib2.urlopen(self.requesturl + query)
            response = response.read()
            return self.decoder.decode(response)
            ]]>
        </body>
    </method>
    <method name="requestPOST">
        <parameter name="function"/>
        <parameter name="data"/>
        <body>
            <![CDATA[
            # Send the client_id in the POST data too, in case it is a localhost method
            query = "func=" + function + "&args=" + str(data) + "&client_id=" + str(self.client_id)
            response = urllib2.urlopen(self.requesturl, query)
            return self.decoder.decode(response.read())
            ]]>
        </body>
    </method>
    <method name="undo">
        <body>
            <![CDATA[
            if len(self.history) == 0:
                return None
            command, changelog = self.history.pop()
            self.future.append(command)
            logs = []
            for reverse_action in changelog.get_inverse():
                logs.append(self.requestPOST(reverse_action[0], self.encoder.encode(reverse_action[1])))
            return logs
            ]]>
        </body>
    </method>
    <method name="redo">
        <body>
            <![CDATA[
            if len(self.future) == 0:
                return None
            command = self.future.pop()
            changelog = self.requestPOST(command[0], command[1])
            self.history.append((command, changelog))
            return changelog
            ]]>
        </body>
    </method>
    <scxml initial="main">
        <parallel id="main">
            <state id="keepalive" initial="loop">
                <state id="loop">
                    <transition after="1" target=".">
                        <script>
                            # Send a keepalive packet to the server
                            self.requestGET("keepalive", '')
                        </script>
                    </transition>
                </state>
            </state>
            <state id="main" initial="main">
                <state id="main">
                    <transition event="read" target=".">
                        <parameter name="association_name" />
                        <parameter name="data" type="LocationValue" default="None"/>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestGET('read', self.encoder.encode(data))"/>
                        </raise>
                    </transition>
                    <transition event="create" target=".">
                        <parameter name="association_name" />
                        <parameter name="data" type="MappingValue" default="None"/>
                        <script>
                            encoded_data = self.encoder.encode(data)
                            changelog = self.requestPOST("create", encoded_data)
                            self.history.append((("create", encoded_data), changelog))
                            self.future = []
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="changelog"/>
                        </raise>
                    </transition>
                    <transition event="update" target=".">
                        <parameter name="association_name" />
                        <parameter name="data" type="MappingValue" default="None"/>
                        <script>
                            encoded_data = self.encoder.encode(data)
                            changelog = self.requestPOST("update", encoded_data)
                            self.history.append((("update", encoded_data), changelog))
                            self.future = []
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="changelog"/>
                        </raise>
                    </transition>
                    <transition event="delete" target=".">
                        <parameter name="association_name" />
                        <parameter name="data" type="MappingValue" default="None"/>
                        <script>
                            encoded_data = self.encoder.encode(data)
                            changelog = self.requestPOST("delete", encoded_data)
                            self.history.append((("delete", encoded_data), changelog))
                            self.future = []
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="changelog"/>
                        </raise>
                    </transition>
                    <transition event="clear" target=".">
                        <parameter name="association_name" />
                        <script>
                            self.history = []
                            self.future = []
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('clear', [[], {}])"/>
                        </raise>
                    </transition>
                    <transition event="conforms_to" target=".">
                        <parameter name="association_name" />
                        <parameter name="model" type="LocationValue" default="None"/>
                        <parameter name="type_model" type="LocationValue" default="None"/>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('conforms_to', '[[' + self.encoder.encode(model) + ', ' + self.encoder.encode(type_model) + '], {}]')"/>
                        </raise>
                    </transition>
                    <transition event="evaluate" target=".">
                        <parameter name="association_name" />
                        <parameter name="args" type="list" default="[]"/>
                        <parameter name="kwargs" type="dict" default="{}"/>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('evaluate', '[' + self.encoder.encode(args) + ', ' + self.encoder.encode(kwargs) + ']')"/>
                        </raise>
                    </transition>
                    <transition event="backup" target=".">
                        <parameter name="association_name" />
                        <parameter name="filename" type="str" default="user_save"/>
                        <script>
                            filename = StringValue(str(self.server_id) + '/' + filename.get_value())
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('backup', '[[' + self.encoder.encode(filename) + '], {}]')"/>
                        </raise>
                    </transition>
                    <transition event="restore" target=".">
                        <parameter name="association_name" />
                        <parameter name="filename" type="str" default="protected"/>
                        <script>
                            filename = StringValue(str(self.server_id) + '/' + filename.get_value())
                            self.history = []
                            self.future = []
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('restore', '[[' + self.encoder.encode(filename) + '], {}]')"/>
                        </raise>
                    </transition>
                    <transition event="run" target=".">
                        <parameter name="association_name" />
                        <parameter name="opname" type="str" default="None"/>
                        <parameter name="kwargs" type="dict" default="{}"/>
                        <script>
                            self.history = []
                            self.future = []
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('run', '[[' + self.encoder.encode(opname) + '], {' + self.encoder.encode(kwargs) + '}]')"/>
                        </raise>
                    </transition>
                    <transition event="execute" target=".">
                        <parameter name="association_name" />
                        <parameter name="location" type="str" default="None"/>
                        <parameter name="args" type="list" default="[]"/>
                        <script>
                            new_args = [location]
                            new_args.extend(args)
                        </script>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('execute', '[' + self.encoder.encode(new_args) + ', {}]')"/>
                        </raise>
                    </transition>
                    <transition event="apply" target=".">
                        <parameter name="association_name" />
                        <parameter name="params" type="MappingValue" default="None"/>
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestPOST('apply', '[[' + self.encoder.encode(params) + '], {}]')"/>
                        </raise>
                    </transition>
                    <transition event="undo" target=".">
                        <parameter name="association_name" />
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.undo()"/>
                        </raise>
                    </transition>
                    <transition event="redo" target=".">
                        <parameter name="association_name" />
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.redo()"/>
                        </raise>
                    </transition>
                    <transition event="get_files" target=".">
                        <parameter name="association_name" />
                        <raise event="client_response" scope="narrow" target="association_name">
                            <parameter expr="SELF.requestGET('get_files', '[[' + self.encoder.encode(StringValue(str(self.server_id))) + '], {}]')"/>
                        </raise>
                    </transition>
                </state>
            </state>
        </parallel>
    </scxml>
</class>